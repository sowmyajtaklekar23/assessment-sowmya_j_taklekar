{"_quickTake.js":{"title":"Quick Take","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport &#x7B; removeWidows &#x7D; from \"string-remove-widows\";\n\nconst &#x7B; ranges, res &#x7D; = removeWidows(\"Some text with many words on one line.\");\n\n// see codsen.com/ranges/\nassert.deepEqual(ranges, [[32, 33, \"&nbsp;\"]]);\n\nassert.equal(res, \"Some text with many words on one&nbsp;line.\");"},"widow-word-removal-from-html.js":{"title":"Widow word removal from text within HTML","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport &#x7B; stripHtml &#x7D; from \"string-strip-html\";\nimport &#x7B; removeWidows &#x7D; from \"string-remove-widows\";\n\nconst someHtml = `The quick brown fox jumps of the lazy dog.<div class=\"a\">`;\n\n// default widow word removal libs are not aware of HTML:\n// -----------------------------------------------------------------------------\n\nassert.equal(\n  removeWidows(someHtml).res,\n  `The quick brown fox jumps of the lazy dog.<div&nbsp;class=\"a\">` // ðŸ˜±\n);\n\n// luckily, removeWidows() consumes optional HTML tag locations\nassert.equal(\n  removeWidows(someHtml, &#x7B;\n    tagRanges: stripHtml(someHtml)\n      // remove the third argument, what to insert (\"&nbsp;\" string in these cases)\n      .ranges.map(([from, to]) => [from, to]),\n  &#x7D;).res,\n  `The quick brown fox jumps of the lazy&nbsp;dog.<div class=\"a\">` // âœ…\n);"}}